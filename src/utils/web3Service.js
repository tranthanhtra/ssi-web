const Web3 = require("web3");

const web3 = new Web3(window.ethereum);

const IdentifierABI = [
    {
        constant: false,
        inputs: [
            {
                name: "_to",
                type: "address",
            },
            {
                name: "_value",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                name: "",
                type: "bool",
            },
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "_owner",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                name: "balance",
                type: "uint256",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "signature",
                type: "bytes",
            },
            {
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "verifySingleSignOn",
        outputs: [
            {
                name: "email",
                type: "string",

            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "signature",
                type: "bytes",
            },
            {
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "verify",
        outputs: [
            {
                name: "isValid",
                type: "bool",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "_name",
                type: "string",
            },
            {
                name: "_dateOfBirth",
                type: "uint64",
            },
            {
                name: "_socialID",
                type: "string",
            },
            {
                name: "_nationality",
                type: "string",
            },
            {
                name: "_email",
                type: "string",
            },
            {
                name: "_phoneNumber",
                type: "string",
            },
            {
                name: "_owner",
                type: "address",
            },
        ],
        name: "store",
        outputs: [{
            name: "succeed",
            type: "bool",
        },],
        stateMutability: "payable",
        type: "function",
    },
]

const ServiceABI = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_owner",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "_name",
                type: "string"
            },
            {
                internalType: "uint64",
                name: "_dateOfBirth",
                type: "uint64"
            },
            {
                internalType: "string",
                name: "_socialID",
                type: "string"
            },
            {
                internalType: "string",
                name: "_nationality",
                type: "string"
            },
            {
                internalType: "string",
                name: "_email",
                type: "string"
            },
            {
                internalType: "string",
                name: "_phoneNumber",
                type: "string"
            },
            {
                internalType: "address",
                name: "_owner",
                type: "address"
            }
        ],
        name: "createISC",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    }
]


export const Web3Service = {
    signMessage: async (message, account, callback) => {
        const hash = Web3.utils.sha3(message);
        console.log(hash);
        await web3.eth.sign(hash, account, (e, signature) => {
            console.log(signature);
            callback(hash, signature);
        }).then(res => console.log(res))
            .catch(err => console.log(err));
    },

    verifyCertificate: (certificate, signature, address, callback) => {
        const hash = Web3.utils.sha3(certificate);
        console.log(hash);
        try {
            const contract = new web3.eth.Contract(IdentifierABI, address);
            contract.methods.verify(signature, hash).call(function (err, isValid) {
                console.log(isValid);
                callback(isValid);
            });
        } catch (err) {
            console.log(err);
        }
    },

    signup: async (did, name, dateOfBirth, socialId, nationality, email, phoneNumber, walletAddress, account, callback) => {
        try {
            const contract = new web3.eth.Contract(ServiceABI, did);
            // const data = contract.methods.createISC(name, dateOfBirth, socialId, nationality, email, phoneNumber, walletAddress).encodeABI();
            //
            // await web3.eth.sendTransaction({
            //     from: account,
            //     to: did,
            //     data: data,
            //     value: 0,
            //     gas: 5000000,
            //     gasPrice: 5e9,
            // },)
            const ISCAddress = await contract.methods.createISC(name, dateOfBirth, socialId, nationality, email, phoneNumber, walletAddress).call({
                from: account,
                gas: 5000000,
                    gasPrice: 5e9,
            })
            console.log(ISCAddress);
            callback(ISCAddress);
        } catch (err) {
            console.log(err);
        }
    },

    providerSignUp: async (name, walletAdress, account, callback) => {
        try {
            const newISC = new web3.eth.Contract(ServiceABI);
            newISC
                .deploy({
                    arguments: [walletAdress],
                    data: "0x608060405234801561001057600080fd5b5060405161195d38038061195d8339818101604052810190610032919061011c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610149565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081519050610116816100f0565b92915050565b600060208284031215610132576101316100b9565b5b600061014084828501610107565b91505092915050565b611805806101586000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a6b32b3514610030575b600080fd5b61004a60048036038101906100459190610455565b610060565b6040516100579190610592565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e990610630565b60405180910390fd5b60006040518060c001604052808a81526020018967ffffffffffffffff16815260200188815260200187815260200186815260200185815250905060008360405161013c9061024f565b6101469190610592565b604051809103906000f080158015610162573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff166302651684836040518263ffffffff1660e01b815260040161019e9190610783565b6020604051808303816000875af11580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e191906107dd565b50806002896040516101f39190610846565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508092505050979650505050505050565b610f72806200085e83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102c48261027b565b810181811067ffffffffffffffff821117156102e3576102e261028c565b5b80604052505050565b60006102f661025d565b905061030282826102bb565b919050565b600067ffffffffffffffff8211156103225761032161028c565b5b61032b8261027b565b9050602081019050919050565b82818337600083830152505050565b600061035a61035584610307565b6102ec565b90508281526020810184848401111561037657610375610276565b5b610381848285610338565b509392505050565b600082601f83011261039e5761039d610271565b5b81356103ae848260208601610347565b91505092915050565b600067ffffffffffffffff82169050919050565b6103d4816103b7565b81146103df57600080fd5b50565b6000813590506103f1816103cb565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610422826103f7565b9050919050565b61043281610417565b811461043d57600080fd5b50565b60008135905061044f81610429565b92915050565b600080600080600080600060e0888a03121561047457610473610267565b5b600088013567ffffffffffffffff8111156104925761049161026c565b5b61049e8a828b01610389565b97505060206104af8a828b016103e2565b965050604088013567ffffffffffffffff8111156104d0576104cf61026c565b5b6104dc8a828b01610389565b955050606088013567ffffffffffffffff8111156104fd576104fc61026c565b5b6105098a828b01610389565b945050608088013567ffffffffffffffff81111561052a5761052961026c565b5b6105368a828b01610389565b93505060a088013567ffffffffffffffff8111156105575761055661026c565b5b6105638a828b01610389565b92505060c06105748a828b01610440565b91505092959891949750929550565b61058c81610417565b82525050565b60006020820190506105a76000830184610583565b92915050565b600082825260208201905092915050565b7f6f6e6c79206f776e65722063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b600061061a6022836105ad565b9150610625826105be565b604082019050919050565b600060208201905081810360008301526106498161060d565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561068a57808201518184015260208101905061066f565b60008484015250505050565b60006106a182610650565b6106ab818561065b565b93506106bb81856020860161066c565b6106c48161027b565b840191505092915050565b6106d8816103b7565b82525050565b600060c08301600083015184820360008601526106fb8282610696565b915050602083015161071060208601826106cf565b50604083015184820360408601526107288282610696565b915050606083015184820360608601526107428282610696565b9150506080830151848203608086015261075c8282610696565b91505060a083015184820360a08601526107768282610696565b9150508091505092915050565b6000602082019050818103600083015261079d81846106de565b905092915050565b60008115159050919050565b6107ba816107a5565b81146107c557600080fd5b50565b6000815190506107d7816107b1565b92915050565b6000602082840312156107f3576107f2610267565b5b6000610801848285016107c8565b91505092915050565b600081905092915050565b600061082082610650565b61082a818561080a565b935061083a81856020860161066c565b80840191505092915050565b60006108528284610815565b91508190509291505056fe60806040526000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50604051610f72380380610f728339818101604052810190610074919061015f565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061018c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012c82610101565b9050919050565b61013c81610121565b811461014757600080fd5b50565b60008151905061015981610133565b92915050565b600060208284031215610175576101746100fc565b5b60006101838482850161014a565b91505092915050565b610dd78061019b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302651684146100515780636b4063411461008157806390ff07f9146100b1578063a7bb5803146100e1575b600080fd5b61006b600480360381019061006691906106e4565b610113565b6040516100789190610748565b60405180910390f35b61009b6004803603810190610096919061083a565b610250565b6040516100a89190610748565b60405180910390f35b6100cb60048036038101906100c6919061083a565b610315565b6040516100d89190610915565b60405180910390f35b6100fb60048036038101906100f69190610937565b6103d1565b60405161010a939291906109ab565b60405180910390f35b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019c90610a54565b60405180910390fd5b816000808201518160000190816101bc9190610c8a565b5060208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160020190816102019190610c8a565b5060608201518160030190816102179190610c8a565b50608082015181600401908161022d9190610c8a565b5060a08201518160050190816102439190610c8a565b5090505060019050919050565b60008060008061025f866103d1565b8093508194508295505050506001858484846040516000815260200160405260405161028e9493929190610d5c565b6020604051602081039080840390855afa1580156102b0573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614935050505092915050565b60606103218383610250565b61033a57604051806020016040528060008152506103c9565b6000600401805461034a90610aa3565b80601f016020809104026020016040519081016040528092919081815260200182805461037690610aa3565b80156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b50505050505b905092915050565b600080600060418451146103e457600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104768261042d565b810181811067ffffffffffffffff821117156104955761049461043e565b5b80604052505050565b60006104a8610414565b90506104b4828261046d565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156104e3576104e261043e565b5b6104ec8261042d565b9050602081019050919050565b82818337600083830152505050565b600061051b610516846104c8565b61049e565b905082815260208101848484011115610537576105366104c3565b5b6105428482856104f9565b509392505050565b600082601f83011261055f5761055e6104be565b5b813561056f848260208601610508565b91505092915050565b600067ffffffffffffffff82169050919050565b61059581610578565b81146105a057600080fd5b50565b6000813590506105b28161058c565b92915050565b600060c082840312156105ce576105cd610428565b5b6105d860c061049e565b9050600082013567ffffffffffffffff8111156105f8576105f76104b9565b5b6106048482850161054a565b6000830152506020610618848285016105a3565b602083015250604082013567ffffffffffffffff81111561063c5761063b6104b9565b5b6106488482850161054a565b604083015250606082013567ffffffffffffffff81111561066c5761066b6104b9565b5b6106788482850161054a565b606083015250608082013567ffffffffffffffff81111561069c5761069b6104b9565b5b6106a88482850161054a565b60808301525060a082013567ffffffffffffffff8111156106cc576106cb6104b9565b5b6106d88482850161054a565b60a08301525092915050565b6000602082840312156106fa576106f961041e565b5b600082013567ffffffffffffffff81111561071857610717610423565b5b610724848285016105b8565b91505092915050565b60008115159050919050565b6107428161072d565b82525050565b600060208201905061075d6000830184610739565b92915050565b600067ffffffffffffffff82111561077e5761077d61043e565b5b6107878261042d565b9050602081019050919050565b60006107a76107a284610763565b61049e565b9050828152602081018484840111156107c3576107c26104c3565b5b6107ce8482856104f9565b509392505050565b600082601f8301126107eb576107ea6104be565b5b81356107fb848260208601610794565b91505092915050565b6000819050919050565b61081781610804565b811461082257600080fd5b50565b6000813590506108348161080e565b92915050565b600080604083850312156108515761085061041e565b5b600083013567ffffffffffffffff81111561086f5761086e610423565b5b61087b858286016107d6565b925050602061088c85828601610825565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108d05780820151818401526020810190506108b5565b60008484015250505050565b60006108e782610896565b6108f181856108a1565b93506109018185602086016108b2565b61090a8161042d565b840191505092915050565b6000602082019050818103600083015261092f81846108dc565b905092915050565b60006020828403121561094d5761094c61041e565b5b600082013567ffffffffffffffff81111561096b5761096a610423565b5b610977848285016107d6565b91505092915050565b600060ff82169050919050565b61099681610980565b82525050565b6109a581610804565b82525050565b60006060820190506109c0600083018661098d565b6109cd602083018561099c565b6109da604083018461099c565b949350505050565b7f6f6e6c792070726f76696465722063616e20706572666f726d2074686973206160008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000610a3e6025836108a1565b9150610a49826109e2565b604082019050919050565b60006020820190508181036000830152610a6d81610a31565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610abb57607f821691505b602082108103610ace57610acd610a74565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610af9565b610b408683610af9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610b87610b82610b7d84610b58565b610b62565b610b58565b9050919050565b6000819050919050565b610ba183610b6c565b610bb5610bad82610b8e565b848454610b06565b825550505050565b600090565b610bca610bbd565b610bd5818484610b98565b505050565b5b81811015610bf957610bee600082610bc2565b600181019050610bdb565b5050565b601f821115610c3e57610c0f81610ad4565b610c1884610ae9565b81016020851015610c27578190505b610c3b610c3385610ae9565b830182610bda565b50505b505050565b600082821c905092915050565b6000610c6160001984600802610c43565b1980831691505092915050565b6000610c7a8383610c50565b9150826002028217905092915050565b610c9382610896565b67ffffffffffffffff811115610cac57610cab61043e565b5b610cb68254610aa3565b610cc1828285610bfd565b600060209050601f831160018114610cf45760008415610ce2578287015190505b610cec8582610c6e565b865550610d54565b601f198416610d0286610ad4565b60005b82811015610d2a57848901518255600182019150602085019450602081019050610d05565b86831015610d475784890151610d43601f891682610c50565b8355505b6001600288020188555050505b505050505050565b6000608082019050610d71600083018761099c565b610d7e602083018661098d565b610d8b604083018561099c565b610d98606083018461099c565b9594505050505056fea2646970667358221220be0cf6911fcff374d8466420a9c2d070e725e9b971206d5eb367e53aa1acf3f764736f6c63430008120033a2646970667358221220fe169705b4ef89e2287130ac05f70e3ec3192b961984c40f690aba30b7100f4864736f6c63430008120033",
                })
                .send({
                    from: account,
                    gas: 5000000,
                    gasPrice: 5e9,
                },)
                .then(function (newContractInstance) {
                    console.log(newContractInstance.options.address); // instance with the new contract address
                    callback(newContractInstance.options.address);
                });
        } catch (err) {
            console.log(err)
        }
    }
}
